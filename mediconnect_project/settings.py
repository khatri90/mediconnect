"""
Django settings for mediconnect_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
# Add these lines near the top of your settings.py after imports
import sys
import psycopg2.extensions

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-70(*hsc-y&xd&dc+e5jr6zs2*ik+37fb0uyd)878f-*+vzqr9y')

# SECURITY WARNING: don't run with debug turned on in production!
# TEMPORARILY SET DEBUG TRUE TO SEE DETAILED ERRORS
DEBUG = os.environ.get('DEBUG', '').lower() == 'true'

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',  # Allow all Render subdomains
    '*',  # Allow all hosts during development - restrict this in production
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # Added for token authentication
    'corsheaders',
    'whitenoise.runserver_nostatic',  # Added for static files on Render
    'doctors',
    'chat',  # Add the new chat app
    'admin_portal'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Added for static files
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ROOT_URLCONF = 'mediconnect_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mediconnect_project.wsgi.application'


# Database
# Use PostgreSQL in production (Render) and MySQL in development
if 'DATABASE_URL' in os.environ:
    # Running on Render.com with PostgreSQL
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=0,  # Disable connection pooling to avoid stale connections
            ssl_require=False,  # Set to True in production
        )
    }
else:
    # Running locally with MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'mediconnect_db',  # Your database name
            'USER': 'root',  # Your MySQL username
            'PASSWORD': 'root',  # Your MySQL password
            'HOST': 'localhost',
            'PORT': '3306',
        }
    }

# Enhanced logging for debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'doctors': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Media files for uploads
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Session settings - ensure they work properly with Render
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 1 day in seconds
SESSION_COOKIE_SECURE = False  # Set to True only if using HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Change to console to see email output directly

# JWT settings
JWT_SECRET = SECRET_KEY

# DISABLE SECURITY SETTINGS TEMPORARILY FOR DEBUGGING
# SECURE_SSL_REDIRECT = False
# SESSION_COOKIE_SECURE = False
# CSRF_COOKIE_SECURE = False

# Zoom API Settings (OAuth)
ZOOM_CLIENT_ID = os.environ.get('ZOOM_CLIENT_ID', '')
ZOOM_CLIENT_SECRET = os.environ.get('ZOOM_CLIENT_SECRET', '')
ZOOM_ACCOUNT_ID = os.environ.get('ZOOM_ACCOUNT_ID', '')  # Your Zoom account ID
ZOOM_WEBHOOK_SECRET_TOKEN = os.environ.get('ZOOM_WEBHOOK_SECRET_TOKEN', '')

# =============================================
# FIREBASE STORAGE CONFIGURATION
# =============================================

# Firebase Storage Settings - Enable by default
FIREBASE_STORAGE_BUCKET = os.environ.get('FIREBASE_STORAGE_BUCKET', '')
FIREBASE_URL_EXPIRATION = 60 * 60 * 24 * 7  # URL expiration time in seconds (7 days)
USE_FIREBASE_STORAGE = True  # Always use Firebase in production

# Configure Django to use Firebase Storage
if not DEBUG and USE_FIREBASE_STORAGE and FIREBASE_STORAGE_BUCKET:
    DEFAULT_FILE_STORAGE = 'mediconnect_project.firebase_storage.FirebaseMediaStorage'
    print(f"Using Firebase Storage with bucket: {FIREBASE_STORAGE_BUCKET}")
else:
    # Use local storage in development
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    print("Using local file storage")
    
# Add our ForceFirebaseStorageMiddleware to the MIDDLEWARE list
MIDDLEWARE = [
    'mediconnect_project.middleware.ForceFirebaseStorageMiddleware',  # Add this line FIRST
] + MIDDLEWARE  # Keep all existing middleware

# Update logging configuration to include Firebase classes
LOGGING['loggers']['mediconnect_project.firebase_storage'] = {
    'handlers': ['console'],
    'level': 'DEBUG',
    'propagate': False,
}

LOGGING['loggers']['mediconnect_project.firebase_uploader'] = {
    'handlers': ['console'],
    'level': 'DEBUG',
    'propagate': False,
}

LOGGING['loggers']['mediconnect_project.middleware'] = {
    'handlers': ['console'],
    'level': 'DEBUG',
    'propagate': False,
}

# Force the correct initialization of Firebase Storage at startup
if not DEBUG and USE_FIREBASE_STORAGE and FIREBASE_STORAGE_BUCKET:
    try:
        # This section is for debugging purposes
        import sys
        from mediconnect_project.firebase_storage import FirebaseMediaStorage
        
        print("*** DIRECTLY INITIALIZING FIREBASE STORAGE AT STARTUP ***")
        firebase_storage = FirebaseMediaStorage()
        
        # Ensure it's initialized
        if not firebase_storage.initialized:
            init_result = firebase_storage._init_firebase()
            print(f"Firebase initialization result: {init_result}")
            
            if not init_result:
                print("WARNING: Failed to initialize Firebase, storage may not work correctly")
        
        # Override the default storage
        import django.core.files.storage
        from django.utils.functional import empty
        
        # Reset default storage
        if hasattr(django.core.files.storage, '_wrapped'):
            django.core.files.storage._wrapped = empty
            
        # Set our firebase storage as the default
        django.core.files.storage.default_storage._wrapped = firebase_storage
        
        print(f"FORCED STORAGE BACKEND IS NOW: {django.core.files.storage.default_storage.__class__.__name__}")
        
    except Exception as e:
        import traceback
        print(f"ERROR initializing Firebase storage at startup: {e}")
        print(traceback.format_exc())